import json

import requests
from emoji import UNICODE_EMOJI
from googletrans import Translator
from telegram.ext import CommandHandler
from telegram.ext import run_async
from julia.modules.helper_funcs.chat_status import spamcheck

from julia import dispatcher
from julia.modules.helper_funcs.chat_status import user_admin


@run_async
@spamcheck
@user_admin
def gtrans(update, context):
    msg = update.effective_message
    args = context.args
    lang = " ".join(args)
    if not lang:
        lang = "en"
    translate_text = msg.reply_to_message.text
    ignore_text = UNICODE_EMOJI.keys()
    for emoji in ignore_text:
        if emoji in translate_text:
            translate_text = translate_text.replace(emoji, "")

    translator = Translator()
    try:
        translated = translator.translate(translate_text, dest=lang)
        trl = translated.src
        results = translated.text
        msg.reply_text("Translated from {} to {}.\n {}".format(trl, lang, results))
    except BaseException:
        msg.reply_text("Error! invalid language code.")


API_KEY = "6ae0c3a0-afdc-4532-a810-82ded0054236"
URL = "http://services.gingersoftware.com/Ginger/correct/json/GingerTheText"


@run_async
@spamcheck
@user_admin
def spellcheck(update, context):
    if update.effective_message.reply_to_message:
        msg = update.effective_message.reply_to_message

        params = dict(lang="US", clientVersion="2.0", apiKey=API_KEY, text=msg.text)

        res = requests.get(URL, params=params)
        changes = json.loads(res.text).get("LightGingerTheTextResult")
        curr_string = ""
        prev_end = 0

        for change in changes:
            start = change.get("From")
            end = change.get("To") + 1
            suggestions = change.get("Suggestions")
            if suggestions:
                sugg_str = suggestions[0].get("Text")
                curr_string += msg.text[prev_end:start] + sugg_str
                prev_end = end

        curr_string += msg.text[prev_end:]
        update.effective_message.reply_text(curr_string)
    else:
        update.effective_message.reply_text(
            "Reply to some message to get grammar corrected text!"
        )


dispatcher.add_handler(CommandHandler("spell", spellcheck))
dispatcher.add_handler(CommandHandler(["tr", "tl"], gtrans, pass_args=True))

__help__ = """
 - /afk <reason>: mark yourself as AFK(Away From Keyboard)
 - brb <reason>: same as the afk command
 - /spell: while replying to a message, will reply with a grammar corrected version(ENGLISH ONLY)
 - /forbesify: Correct your punctuations better use the advanged spell module
 - /tr (language code) as reply to a long message.
 - /define <text>: Type the word or expression you want to search\nFor example /define Gay
 - /emotion: Type in reply to a message to check emotions (English Only)
 - /banme: ban yourself from a chat
 - /kickme: kicks yourself from a chat
 - /rules: get the rules for this chat
 - /markdownhelp: quick summary of how markdown works in telegram - can only be called in private chats
 - /report <reason> | @admin: reply to a message to report it to admins(non-admin only)
 - /reports <on/off>: change report setting (admin only)
"""

__mod_name__ = "Helpers ðŸ¤—"
